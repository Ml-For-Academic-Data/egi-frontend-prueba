# Este pipeline ahora incluye tests y builds condicionales para optimizar la ejecución.
name: CI/CD para Microservicios Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  # El nombre de la imagen para la carpeta 'visualization'
  VISUALIZATION_IMAGE_NAME: ${{ github.repository_owner }}/egi-dashboard
  # El nombre de la imagen para la carpeta 'static-web'
  STATIC_WEB_IMAGE_NAME: ${{ github.repository_owner }}/egi-static-web

jobs:
  # --- 1. JOB DE PRUEBAS ---
  # Este job se ejecuta primero para asegurar la calidad del código.
  test:
    name: Ejecutar Pruebas (Linting y Unit Tests)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # O la versión que estés usando

      - name: Instalar dependencias de ambos servicios
        run: |
          pip install --no-cache-dir -r visualization/requirements.txt
          pip install --no-cache-dir -r static-web/requirements.txt
          pip install flake8 pytest

      - name: Ejecutar Linter (flake8) para revisar la calidad del código
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # Este comando ejecuta pytest y, si falla con el código 5 (no tests found),
      # trata el paso como un éxito. Para cualquier otro error, el pipeline fallará.
      - name: Ejecutar Unit Tests (pytest)
        run: pytest || if [ $? -eq 5 ]; then exit 0; else exit $?; fi

  # --- 2. JOB PARA DETECTAR CAMBIOS ---
  # Este job revisa qué carpetas han cambiado para ejecutar los builds de forma condicional.
  check-changes:
    name: Detectar Cambios en los Servicios
    runs-on: ubuntu-latest
    outputs:
      visualization: ${{ steps.filter.outputs.visualization }}
      static-web: ${{ steps.filter.outputs.static-web }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            visualization:
              - 'visualization/**'
            'static-web':
              - 'static-web/**'

  # --- 3. JOBS DE BUILD CONDICIONALES ---
  build-and-push-visualization:
    name: Construir y Publicar Imagen de Visualization
    needs: [test, check-changes] # Depende de las pruebas y del chequeo de cambios
    # Se ejecuta solo si hay cambios en la carpeta 'visualization' y estamos en la rama 'main'
    if: needs.check-changes.outputs.visualization == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
      - name: Iniciar sesión en GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extraer metadatos (tag)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.VISUALIZATION_IMAGE_NAME }}
          tags: type=sha,prefix=,format=short
      - name: Construir y publicar la imagen
        uses: docker/build-push-action@v5
        with:
          context: ./visualization
          file: ./visualization/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  build-and-push-static-web:
    name: Construir y Publicar Imagen de Static Web
    needs: [test, check-changes]
    # Se ejecuta solo si hay cambios en la carpeta 'static-web' y estamos en la rama 'main'
    if: needs.check-changes.outputs['static-web'] == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
      - name: Iniciar sesión en GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extraer metadatos (tag)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.STATIC_WEB_IMAGE_NAME }}
          tags: type=sha,prefix=,format=short
      - name: Construir y publicar la imagen
        uses: docker/build-push-action@v5
        with:
          context: ./static-web
          file: ./static-web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  # --- 4. JOB PARA ACTUALIZAR MANIFIESTOS ---
  update-manifest:
    name: Actualizar Manifiesto en Repo de Infraestructura
    # Se ejecuta si CUALQUIERA de los builds fue exitoso
    needs: [build-and-push-visualization, build-and-push-static-web]
    # 'always()' asegura que este job se ejecute incluso si uno de los builds se omite (skipped)
    if: always() && (needs.build-and-push-visualization.result == 'success' || needs.build-and-push-static-web.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio de infraestructura
        uses: actions/checkout@v4
        with:
          repository: Ml-For-Academic-Data/egi-infrastructure-k8s
          # Necesitas un token con permisos de escritura para hacer el push
          token: ${{ secrets.REPO_ACCESS_TOKEN }} 

      - name: Setup yq (herramienta para editar YAML)
        uses: mikefarah/yq@v4.30.8
   
      # Actualiza el tag de 'visualization' solo si su build fue exitoso
      - name: Actualizar tag de imagen de Visualization
        if: needs.build-and-push-visualization.result == 'success'
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-push-visualization.outputs.tag }}" | awk -F: '{print $2}')
          echo "Actualizando a tag: ${IMAGE_TAG}"
          # Asume la estructura anidada en values.yaml: services -> visualization -> image -> tag
          yq e -i '.services.visualization.image.tag = "'${IMAGE_TAG}'"' charts/frontend/values-desarrollo.yaml

      # Actualiza el tag de 'static-web' solo si su build fue exitoso
      - name: Actualizar tag de imagen de Static Web
        if: needs.build-and-push-static-web.result == 'success'
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-push-static-web.outputs.tag }}" | awk -F: '{print $2}')
          echo "Actualizando a tag: ${IMAGE_TAG}"
          # Ruta y estructura corregidas según tu petición
          yq e -i '.services.static-web.image.tag = "'${IMAGE_TAG}'"' charts/frontend-static/values-desarrollo.yaml

      - name: Hacer Commit y Push de los cambios
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions-bot@github.com'
          # El comando 'git diff --quiet' revisa si hay cambios para commitear
          if ! git diff --quiet HEAD; then
            # 'git add .' es más simple para añadir todos los archivos modificados
            git add .
            git commit -m "ci(frontend): Actualiza tag(s) de imagen a ${{ github.sha }}"
            git push
          else
            echo "No hay cambios en los manifiestos para commitear."
          fi
