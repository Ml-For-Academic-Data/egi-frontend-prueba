# Este pipeline está diseñado para construir dos microservicios (visualization y static-web)
# desde un solo repositorio y actualizar un manifiesto de Helm en otro repositorio.
name: CI/CD para Microservicios Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  # CORRECCIÓN: Nombres de las imágenes en el registry según tu petición.
  # La carpeta 'visualization' genera la imagen 'egi-dashboard'.
  VISUALIZATION_IMAGE_NAME: ${{ github.repository_owner }}/egi-dashboard
  # La carpeta 'static-web' genera la imagen 'egi-static-web'.
  STATIC_WEB_IMAGE_NAME: ${{ github.repository_owner }}/egi-static-web

jobs:
  # (Opcional) Puedes mantener tu job de 'test' aquí si lo tienes.
  # test:
  #   ...

  # Job para construir y publicar la imagen de la carpeta 'visualization'
  build-and-push-visualization:
    name: Construir y Publicar Imagen de Visualization (como egi-dashboard)
    # needs: test # Descomenta si tienes un job de pruebas
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Iniciar sesión en GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extraer metadatos de la imagen (tag)
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Usa la variable de entorno para el nombre de la imagen 'egi-dashboard'
          images: ${{ env.REGISTRY }}/${{ env.VISUALIZATION_IMAGE_NAME }}
          tags: type=sha,prefix=,format=short

      - name: Construir y publicar la imagen de Visualization
        uses: docker/build-push-action@v5
        with:
          context: ./visualization # El contexto es la carpeta de origen
          file: ./visualization/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  # Job para construir y publicar la imagen de la carpeta 'static-web'
  build-and-push-static-web:
    name: Construir y Publicar Imagen de Static Web
    # needs: test # Descomenta si tienes un job de pruebas
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Iniciar sesión en GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extraer metadatos de la imagen (tag)
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Usa la variable de entorno para el nombre de la imagen 'egi-static-web'
          images: ${{ env.REGISTRY }}/${{ env.STATIC_WEB_IMAGE_NAME }}
          tags: type=sha,prefix=,format=short

      - name: Construir y publicar la imagen de Static Web
        uses: docker/build-push-action@v5
        with:
          context: ./static-web # El contexto es la carpeta de origen
          file: ./static-web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  # Job para actualizar el manifiesto de Helm
  update-manifest:
    name: Actualizar Manifiesto en K8s Repo
    needs: [build-and-push-visualization, build-and-push-static-web]
    # Se ejecuta siempre para comprobar si alguno de los jobs de build tuvo éxito
    if: success() || failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio de infraestructura
        uses: actions/checkout@v4
        with:
          repository: Ml-For-Academic-Data/egi-infrastructure-k8s
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Setup yq
        uses: mikefarah/yq@v4.30.8
   
      # Actualiza el tag de 'visualization' solo si su build fue exitoso
      - name: Actualizar tag de imagen de Visualization
        if: needs.build-and-push-visualization.result == 'success'
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-push-visualization.outputs.tag }}" | awk -F: '{print $2}')
          echo "Actualizando '.services.visualization.image.tag' a: ${IMAGE_TAG}"
          yq e -i '.services.visualization.image.tag = "'${IMAGE_TAG}'"' charts/frontend/values-desarrollo.yaml

      # Actualiza el tag de 'staticWeb' solo si su build fue exitoso
      - name: Actualizar tag de imagen de Static Web
        if: needs.build-and-push-static-web.result == 'success'
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-push-static-web.outputs.tag }}" | awk -F: '{print $2}')
          echo "Actualizando '.services.staticWeb.image.tag' a: ${IMAGE_TAG}"
          yq e -i '.services.staticWeb.image.tag = "'${IMAGE_TAG}'"' charts/frontend/values-desarrollo.yaml

      - name: Hacer Commit y Push de los cambios
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions-bot@github.com'
          # Solo hace commit si el archivo 'values-desarrollo.yaml' realmente cambió
          if ! git diff --quiet charts/frontend/values-desarrollo.yaml; then
            git add charts/frontend/values-desarrollo.yaml
            git commit -m "ci(frontend): Actualiza imagen a ${{ github.sha }}"
            git push
          else
            echo "No hay cambios en el manifiesto para commitear."
          fi
